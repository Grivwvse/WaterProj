@{
    ViewData["Title"] = "Поиск маршрутов";
}


<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-10">
            <div class="card shadow-lg">
                <div class="card-header bg-primary text-white text-center">
                    <h3><i class="bi bi-search"></i>Поиск водных маршрутов</h3>
                </div>
                <div class="card-body">
                    <form action="/Route/SearchRoutes" method="get" id="routeSearchForm">
                        <div class="row g-4">
                            <!-- Поиск по названию -->
                            <div class="col-md-12">
                                <label for="routeNameSearch" class="form-label">
                                    <i class="bi bi-pencil"></i> Название или описание маршрута
                                </label>
                                <input type="text" class="form-control" id="routeNameSearch" name="name" placeholder="Введите название или часть описания">
                            </div>

                            <!-- Дата поездки -->
                            <div class="col-md-12">
                                <label for="departureDate" class="form-label">
                                    <i class="bi bi-calendar-event"></i> Дата поездки
                                </label>
                                <input type="date" class="form-control" id="departureDate" name="departureDate" min="@DateTime.Now.ToString("yyyy-MM-dd")">
                            </div>

                            <!-- Разделитель -->
                            <div class="col-md-12 text-center">
                                <h5 class="text-muted">Или выберите остановки</h5>
                            </div>

                            <!-- Точка отправления -->
                            <div class="col-md-6">
                                <label for="startStopSelect" class="form-label">
                                    <i class="bi bi-geo-alt"></i> Точка отправления
                                </label>
                                <select class="form-select" id="startStopSelect" name="startStopId">
                                    <option value="">Выберите пункт отправления</option>
                                    <!-- Добавьте пункты отправления -->
                                </select>
                            </div>

                            <!-- Точка прибытия -->
                            <div class="col-md-6">
                                <label for="endStopSelect" class="form-label">
                                    <i class="bi bi-geo-alt-fill"></i> Точка прибытия
                                </label>
                                <select class="form-select" id="endStopSelect" name="endStopId">
                                    <option value="">Выберите пункт назначения</option>
                                    <!-- Добавьте пункты назначения -->
                                </select>
                            </div>

                            <input type="hidden" id="startStopName" name="startStopName" />
                            <input type="hidden" id="endStopName" name="endStopName" />

                            <!-- Кнопка поиска -->
                            <div class="col-12 text-center">
                                <button type="submit" class="btn btn-primary btn-lg px-5">
                                    <i class="bi bi-search"></i> Найти маршруты
                                </button>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <!-- Карта -->
    <div class="row mt-4">
        <div class="col-md-12">
            <div id="searchMap" class="border rounded shadow-sm" style="width: 100%; height: 500px;"></div>
        </div>
    </div>
</div>



 <script>
       document.addEventListener("DOMContentLoaded", function() {
           // Инициализация карты, когда API Яндекс.Карт загружен
           ymaps.ready(function() {
               const myMap = new ymaps.Map('searchMap', {
                   center: [59.938339, 30.313558], // Центр Санкт-Петербурга
                   zoom: 10,
                   controls: ['zoomControl', 'typeSelector']
               });

               // Создаем коллекцию для меток остановок
               const stopsCollection = new ymaps.GeoObjectCollection();

               // Храним все остановки для последующего использования
               let allStops = [];

               // Глобальная переменная для хранения полилиний маршрутов
               let routePolylines = [];

               // Загружаем все остановки
               loadStops();

               // Инициализируем обработчики выбора остановок
               initStopSelectors();

               // Функция загрузки всех остановок
               async function loadStops() {
                   try {
                       const response = await fetch('/Route/GetAllStops');
                       if (!response.ok) {
                           throw new Error(`HTTP ошибка: ${response.status}`);
                       }

                       const data = await response.json();
                       if (!data.success) {
                           throw new Error("Ошибка при загрузке данных остановок");
                       }

                       allStops = data.stops || [];

                       // Добавляем остановки на карту
                       addStopsToMap(allStops);

                       // Заполняем выпадающие списки
                       populateStopsDropdowns(allStops);
                   } catch (error) {
                       console.error("Ошибка при загрузке остановок:", error);
                   }
               }

               // Функция добавления остановок на карту
               function addStopsToMap(stops) {
                   stops.forEach((stop) => {
                       if (stop.latitude !== undefined && stop.longitude !== undefined) {
                           const placemark = new ymaps.Placemark(
                               [stop.latitude, stop.longitude],
                               {
                                   iconContent: stop.name,
                                   hintContent: stop.name,
                                   balloonContentHeader: 'Остановка',
                                   balloonContent: `ID: ${stop.stopId}, Координаты: ${stop.latitude.toFixed(6)}, ${stop.longitude.toFixed(6)}`,
                                   stopId: stop.stopId
                               },
                               {
                                   preset: 'islands#blueStretchyIcon'
                               }
                           );

                           // Обработчик клика по метке
                           placemark.events.add('click', function() {
                               const stopId = placemark.properties.get('stopId');
                               const stopName = placemark.properties.get('iconContent');

                               // Открываем балун с выбором действия
                               placemark.properties.set('balloonContentFooter', `
                                   <div class="mt-2">
                                       <button class="btn btn-primary btn-sm" id="selectAsStart">Выбрать как начало</button>
                                       <button class="btn btn-success btn-sm" id="selectAsEnd">Выбрать как конец</button>
                                   </div>
                               `);

                               // После открытия балуна добавляем обработчики на кнопки
                               placemark.events.add('balloonopen', function() {
                                   setTimeout(() => {
                                       document.getElementById('selectAsStart')?.addEventListener('click', async function() {
                                           // Устанавливаем значение в выпадающий список
                                           document.getElementById('startStopSelect').value = stopId;
                                           document.getElementById('startStopName').value = stopName;

                                           // Важно: вызываем фильтрацию доступных точек
                                           await updateAvailableStops(stopId);

                                           // Подсвечиваем выбранную точку
                                           highlightSelectedStops();

                                           // Закрываем балун
                                           placemark.balloon.close();
                                       });

                                       document.getElementById('selectAsEnd')?.addEventListener('click', function() {
                                           document.getElementById('endStopSelect').value = stopId;
                                           document.getElementById('endStopName').value = stopName;
                                           highlightSelectedStops();
                                           placemark.balloon.close();
                                       });
                                   }, 100);
                               });
                           });

                           stopsCollection.add(placemark);
                       }
                   });

                   // Добавляем коллекцию на карту
                   myMap.geoObjects.add(stopsCollection);

                   // Масштабируем карту, чтобы были видны все метки
                   if (stopsCollection.getLength() > 0) {
                       myMap.setBounds(stopsCollection.getBounds(), {
                           checkZoomRange: true,
                           zoomMargin: 30
                       });
                   }
               }

               // Функция заполнения выпадающих списков с остановками
               function populateStopsDropdowns(stops) {
                   const startSelect = document.getElementById('startStopSelect');
                   const endSelect = document.getElementById('endStopSelect');

                   // Очищаем текущие опции, оставляя первую (пустую)
                   startSelect.innerHTML = '<option value="">Выберите пункт отправления</option>';
                   endSelect.innerHTML = '<option value="">Выберите пункт прибытия</option>';

                   // Добавляем остановки в выпадающие списки
                   stops.forEach(stop => {
                       const option = document.createElement('option');
                       option.value = stop.stopId;
                       option.textContent = stop.name;

                       const optionCopy = option.cloneNode(true);

                       startSelect.appendChild(option);
                       endSelect.appendChild(optionCopy);
                   });
               }

               function updateStopNames() {
                   const startSelect = document.getElementById('startStopSelect');
                   const endSelect = document.getElementById('endStopSelect');
                   const startStopNameInput = document.getElementById('startStopName');
                   const endStopNameInput = document.getElementById('endStopName');

                   // Обновляем имя начальной остановки, если выбрана
                   if (startSelect.selectedIndex > 0) {
                       startStopNameInput.value = startSelect.options[startSelect.selectedIndex].text;
                   }

                   // Обновляем имя конечной остановки, если выбрана
                   if (endSelect.selectedIndex > 0) {
                       endStopNameInput.value = endSelect.options[endSelect.selectedIndex].text;
                   }
               }

               // Функция инициализации обработчиков выбора остановок
               function initStopSelectors() {
                   const startSelect = document.getElementById('startStopSelect');
                   const endSelect = document.getElementById('endStopSelect');

                   // Обработчик изменения начальной точки через выпадающий список
                   startSelect.addEventListener('change', async function () {
                       const startStopId = this.value;
                       if (startStopId) {
                           await updateAvailableStops(startStopId);
                           highlightSelectedStops();
                       } else {
                           // Если выбор сброшен, показываем все точки
                           resetAllStops();
                       }
                   });

                   // Обработчик выбора конечной точки
                   endSelect.addEventListener('change', function() {
                       highlightSelectedStops();
                       if (!this.value) {
                           // Если конечная точка сброшена, показываем маршруты снова
                           const startStopId = document.getElementById('startStopSelect').value;
                           if (startStopId) {
                               showRoutesFromStartStop(startStopId);
                           }
                       } else {
                           // Если конечная точка выбрана, скрываем маршруты
                           clearRoutePolylines();
                       }
                   });
               }

               // Функция сброса всех точек к исходному состоянию
               function resetAllStops() {
                   // Показываем все точки
                   stopsCollection.each(function(placemark) {
                       placemark.options.set('visible', true);
                       placemark.options.set('preset', 'islands#blueStretchyIcon');
                   });

                   // Заполняем выпадающий список конечных точек всеми точками
                   populateStopsDropdowns(allStops);

                   // Удаляем все маршруты с карты
                   clearRoutePolylines();
               }

               // Функция обновления доступных точек назначения
    async function showRoutesFromStartStop(startStopId) {
        try {
            console.log("Загрузка маршрутов для начальной точки ID:", startStopId);

            // Удаляем предыдущие маршруты с карты
            clearRoutePolylines();

            try {
                // Получаем маршруты с выбранной начальной точкой
                const url = `/Route/GetRoutesFromStartStop?startStopId=${startStopId}`;
                console.log("Отправка запроса по адресу:", url);

                const response = await fetch(url);
                console.log("Статус ответа:", response.status, response.statusText);

                if (!response.ok) {
                    throw new Error(`HTTP ошибка: ${response.status}`);
                }

                const responseText = await response.text();
                console.log("Текст ответа:", responseText);

                let data;
                try {
                    data = JSON.parse(responseText);
                } catch (e) {
                    console.error("Ошибка парсинга JSON:", e);
                    throw new Error("Неверный формат ответа от сервера");
                }

                if (!data.success) {
                    throw new Error("Ошибка при загрузке маршрутов: " + (data.error || "неизвестная ошибка"));
                }

                const routes = data.routes || [];
                console.log(`Получено ${routes.length} маршрутов для начальной точки ID:${startStopId}`, routes);

                // Добавляем маршруты на карту
                for (const route of routes) {
                    try {
                        console.log(`Обработка маршрута #${route.routeId}:`, route);

                        // Если карта маршрута отсутствует, пропускаем его
                        if (!route.map) {
                            console.warn(`Маршрут #${route.routeId} не содержит данных карты`);
                            continue;
                        }

                        console.log("Данные карты маршрута:", route.map);
                        let mapData;
                        try {
                            mapData = JSON.parse(route.map);
                        } catch (e) {
                            console.error("Ошибка парсинга данных карты:", e);
                            continue;
                        }

                        // Проверяем наличие данных линий
                        if (!mapData.lines || !Array.isArray(mapData.lines) || mapData.lines.length < 2) {
                            console.warn(`Маршрут #${route.routeId} не содержит корректных данных линий`);
                            continue;
                        }

                        // Проверяем, что все координаты - действительные числа
                        const validCoordinates = mapData.lines.filter(point =>
                            Array.isArray(point) &&
                            point.length === 2 &&
                            !isNaN(point[0]) &&
                            !isNaN(point[1])
                        );

                        if (validCoordinates.length < 2) {
                            console.warn(`Маршрут #${route.routeId} не содержит достаточного количества валидных координат`);
                            continue;
                        }

                        // Проверка направления маршрута
                        try {
                            const routeStopsResponse = await fetch(`/Route/GetRouteStops?routeId=${route.routeId}&startStopId=${startStopId}`);
                            const routeStopsData = await routeStopsResponse.json();

                            if (!routeStopsData.success || !routeStopsData.hasAvailableStops) {
                                console.log(`Маршрут #${route.routeId} пропущен: нет доступных остановок после выбранной`);
                                continue;
                            }
                        } catch (error) {
                            console.error(`Ошибка при проверке направления маршрута #${route.routeId}:`, error);
                            continue;
                        }

                        // Создаем полилинию для маршрута
                        const polyline = new ymaps.Polyline(validCoordinates, {
                            hintContent: route.name || `Маршрут #${route.routeId}`,
                            routeId: route.routeId
                        }, {
                            strokeColor: getRandomColor(), // Случайный цвет для каждого маршрута
                            strokeWidth: 3,
                            strokeOpacity: 0.7,
                            strokeStyle: 'dash'
                        });

                        // Добавляем обработчик клика по маршруту
                        polyline.events.add('click', function(e) {
                            const routeId = polyline.properties.get('routeId');
                            const routeName = polyline.properties.get('hintContent');

                            console.log("Клик по маршруту:", { routeId, routeName });

                            // Используем самый простой способ с текстовым содержимым
                            const balloonContentBody = `
                                <div style="padding:5px;">
                                    <p>Маршрут #${routeId}</p>
                                    <p><a href="/Route/RouteDetails?routeID=${routeId}" class="btn btn-primary btn-sm">Подробнее</a></p>
                                </div>
                            `;

                            polyline.properties.set('balloonContentHeader', routeName || `Маршрут #${routeId}`);
                            polyline.properties.set('balloonContentBody', balloonContentBody);

                            // Открываем балун
                            polyline.balloon.open(e.get('coords'));
                        });

                        // Добавляем полилинию на карту
                        myMap.geoObjects.add(polyline);
                        console.log("Полилиния добавлена на карту");

                        // Сохраняем ссылку на полилинию для возможности удаления
                        routePolylines.push(polyline);
                    } catch (parseError) {
                        console.error(`Ошибка при обработке маршрута #${route.routeId}:`, parseError);
                    }
                }
            } catch (serverError) {
                console.error("Ошибка при получении данных с сервера:", serverError);
            }
        } catch (error) {
            console.error("Общая ошибка в showRoutesFromStartStop:", error);

            // В случае общей ошибки устанавливаем центр в центр Санкт-Петербурга
            myMap.setCenter([59.938339, 30.313558], 10);
        }
    }


                        // Функция обновления доступных точек назначения
                    async function updateAvailableStops(startStopId) {
                        try {
                            console.log("Обновление доступных остановок для начальной точки ID:", startStopId);

                            // Запрос к серверу для получения доступных точек назначения
                            const response = await fetch(`/Route/GetAvailableStops?startStopId=${startStopId}`);
                            if (!response.ok) {
                                throw new Error(`HTTP ошибка: ${response.status}`);
                            }

                            const data = await response.json();
                            if (!data.success) {
                                throw new Error("Ошибка при загрузке доступных точек назначения");
                            }

                            const availableStopIds = data.availableStopIds || [];
                            console.log("Доступные точки назначения:", availableStopIds);

                            // Обновляем видимость точек на карте
                            stopsCollection.each(function(placemark) {
                                const stopId = placemark.properties.get('stopId');

                                // Всегда оставляем видимой начальную точку
                                if (stopId == startStopId) {
                                    placemark.options.set('visible', true);
                                    placemark.options.set('preset', 'islands#greenStretchyIcon');
                                }
                                // Скрываем недоступные точки
                                else if (!availableStopIds.includes(stopId)) {
                                    placemark.options.set('visible', false);
                                } else {
                                    // Возвращаем нормальный вид доступным точкам
                                    placemark.options.set('visible', true);
                                    placemark.options.set('preset', 'islands#blueStretchyIcon');
                                }
                            });

                            // Обновляем выпадающий список конечных точек
                            const endSelect = document.getElementById('endStopSelect');
                            endSelect.innerHTML = '<option value="">Выберите пункт прибытия</option>';

                            // Добавляем только доступные остановки в выпадающий список
                            availableStopIds.forEach(stopId => {
                                const stop = allStops.find(s => s.stopId == stopId);
                                if (stop) {
                                    const option = document.createElement('option');
                                    option.value = stop.stopId;
                                    option.textContent = stop.name;
                                    endSelect.appendChild(option);
                                }
                            });

                            // Отображаем маршруты для выбранной начальной точки
                            await showRoutesFromStartStop(startStopId);
                        } catch (error) {
                            console.error("Ошибка при обновлении доступных точек:", error);
                            // В случае ошибки возвращаем все точки
                            resetAllStops();
                        }
                    }
               // Функция для удаления всех маршрутов с карты
               function clearRoutePolylines() {
                   // Удаляем все ранее добавленные маршруты
                   routePolylines.forEach(polyline => {
                       myMap.geoObjects.remove(polyline);
                   });
                   // Очищаем массив
                   routePolylines = [];
               }

               // Функция для генерации случайного цвета
               function getRandomColor() {
                   // Массив предопределенных цветов для лучшей различимости
                   const colors = [
                       '#FF0000', // красный
                       '#0000FF', // синий
                       '#008000', // зеленый
                       '#800080', // фиолетовый
                       '#FFA500', // оранжевый
                       '#00FFFF', // голубой
                       '#FF00FF', // розовый
                       '#FFFF00', // желтый
                       '#A52A2A', // коричневый
                       '#000080'  // темно-синий
                   ];
                   // Выбираем случайный цвет из массива
                   return colors[Math.floor(Math.random() * colors.length)];
               }

               // Функция выделения выбранных остановок на карте
               function highlightSelectedStops() {
                   const startStopId = document.getElementById('startStopSelect').value;
                   const endStopId = document.getElementById('endStopSelect').value;

                   // Если начальная точка выбрана, подсвечиваем её и уже отфильтрованные доступные точки
                   if (startStopId) {
                       stopsCollection.each(function(placemark) {
                           const stopId = placemark.properties.get('stopId');

                           // Начальную точку подсвечиваем зеленым
                           if (stopId == startStopId) {
                               placemark.options.set('preset', 'islands#greenStretchyIcon');
                           }
                           // Не меняем стиль для других видимых точек, они уже отфильтрованы
                       });
                   } else {
                       // Если начальная точка не выбрана, сбрасываем все к исходному состоянию
                       stopsCollection.each(function(placemark) {
                           placemark.options.set('preset', 'islands#blueStretchyIcon');
                           placemark.options.set('visible', true);
                       });
                   }

                   // Если выбрана конечная точка, подсвечиваем её красным
                   if (endStopId) {
                       stopsCollection.each(function(placemark) {
                           if (placemark.properties.get('stopId') == endStopId) {
                               placemark.options.set('preset', 'islands#redStretchyIcon');
                           }
                       });
                   }

                   // Обновляем скрытые поля с именами остановок
                   updateStopNames();
               }
           });
       });
</script>