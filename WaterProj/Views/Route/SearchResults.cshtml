@model List<WaterProj.DTOs.RouteSearchResultDto>

@{
    ViewData["Title"] = "Результаты поиска маршрутов";
}

<section>

    <div class="page-wrapper">
        <div class="container main-container">
            <!-- Информация о маршруте -->
            <div class="route-info">
                <h2 class="mb-4">Информация о маршруте</h2>

                @if (ViewBag.SearchDepartureDate != null)
                {
                    <div class="alert alert-info mt-3">
                        <i class="bi bi-calendar-event"></i>
                        Поиск маршрутов на дату: <strong>@ViewBag.DepartureDate (@ViewBag.DepartureDayOfWeek)</strong>
                    </div>
                }
                else
                {
                <div class="alert alert-info mt-3">
                    <i class="bi bi-calendar-event"></i>
                    Поиск маршрутов по всем датам
                </div>
                }

                <div class="route-points mb-4">
                    <div class="route-point">
                        <div class="icon bg-success text-white">
                            <i class="bi bi-circle-fill"></i>
                        </div>
                        <div class="details">
                            <h5 class="mb-1">Откуда</h5>
                            <p class="mb-0" id="startStopField">Остановка "@ViewBag.StartStopName"</p>
                        </div>
                    </div>
                    <div class="route-separator">
                        <i class="bi bi-arrow-right"></i> <!-- Стрелка вправо -->
                    </div>
                    <div class="route-point">
                        <div class="icon bg-danger text-white">
                            <i class="bi bi-geo-alt-fill"></i>
                        </div>
                        <div class="details">
                            <h5 class="mb-1">Куда</h5>
                            <p class="mb-0" id="endStopField">Остановка "@ViewBag.EndStopName"</p>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Заголовок подобранных маршрутов -->
            <div class="routes-header">
                <h3>Подобранные маршруты</h3>
                <p class="text-muted">Найдено @ViewBag.RouteAmount вариантов проезда</p>
            </div>

            <!-- Блок фильтров -->
            <div class="filters-block mb-4">
                <div class="row">
                    <div class="col-md-6 col-lg-4 mb-2">
                        <label for="ratingFilter" class="form-label fw-bold">Фильтр по рейтингу:</label>
                        <select class="form-select" id="ratingFilter">
                            <option value="all" selected>Все рейтинги</option>
                            <option value="4">4+</option>
                            <option value="3">3+</option>
                            <option value="2">2+</option>
                            <option value="1">1+</option>
                            <option value="no-rating">Без рейтинга</option>
                        </select>
                    </div>
                    <div class="col-md-6 col-lg-4">
                        <label for="sortOrder" class="form-label fw-bold">Сортировка:</label>
                        <select class="form-select" id="sortOrder">
                            <option value="rating-desc" selected>По убыванию рейтинга</option>
                            <option value="rating-asc">По возрастанию рейтинга</option>
                            <option value="popularity-desc">По популярности (убывание)</option>
                            <option value="popularity-asc">По популярности (возрастание)</option>
                        </select>
                    </div>
                </div>
            </div>

            @if (Model == null || !Model.Any())
            {
                <p>Маршруты не найдены</p>
            }
            else
            {

                @foreach (var route in Model)
                {

                    <!-- Карточки маршрутов -->
                    <div class="routes-container">
                        <!-- Карточка 1 -->
                        <div class="card route-card" data-route-id="@route.RouteId">
                            <div class="card-body">
                                <div class="d-flex justify-content-between align-items-center mb-2">
                                    <h5 class="card-title mb-0">
                                        <span class="route-number">@route.Name</span>
                                        <span class="route-time">От @route.Price руб</span>
                                    </h5>
                                    

                                    @if (route.Rating < 3 && route.Rating >= 1)
                                    {
                                        <span class="badge bg-danger">Рейтинг : @Math.Round(@route.Rating, 1)</span>
                                    }
                                    @if (route.Rating < 4 && route.Rating >= 3)
                                    {
                                        <span class="badge bg-warning">Рейтинг : @Math.Round(@route.Rating, 1)</span>
                                    }
                                    @if (route.Rating >= 4)
                                    {
                                        <span class="badge bg-success">Рейтинг : @Math.Round(@route.Rating, 1)</span>
                                    }
                                    @if (route.Rating < 1)
                                    {
                                        <span class="badge bg-secondary">Рейтинг : Нет данных</span>
                                    }


                                    
                                </div>
                                <p class="card-text">@(string.IsNullOrEmpty(route.Description) ? "Нет описания" : route.Description)</p>
                                <div class="route-details">
                                    <!-- Дни недели маршрута -->
                                    @if (route.RouteDays != null && route.RouteDays.Any())
                                    {
                                        <div class="route-days d-flex align-items-center">
                                            <i class="bi bi-calendar-week me-1"></i>
                                            @foreach (var day in route.RouteDays.OrderBy(d => (int)d))
                                            {
                                                <span class="badge bg-light text-dark me-1">
                                                    @switch (day)
                                                    {
                                                        case DayOfWeek.Monday:
                                                            <text>Пн</text>
                                                            break;
                                                        case DayOfWeek.Tuesday:
                                                            <text>Вт</text>
                                                            break;
                                                        case DayOfWeek.Wednesday:
                                                            <text>Ср</text>
                                                            break;
                                                        case DayOfWeek.Thursday:
                                                            <text>Чт</text>
                                                            break;
                                                        case DayOfWeek.Friday:
                                                            <text>Пт</text>
                                                            break;
                                                        case DayOfWeek.Saturday:
                                                            <text>Сб</text>
                                                            break;
                                                        case DayOfWeek.Sunday:
                                                            <text>Вс</text>
                                                            break;
                                                    }
                                                </span>
                                            }
                                        </div>
                                    }
                                    <div>Расписание @(string.IsNullOrEmpty(route.Schedule) ? "Нет описания" : route.Schedule  )</div>
                                    <div>
                                        Перевозчик: @route.TransporterName Рейтинг : @route.TransporterRating  </div> 
                                        <!--  //(route.TransporterRating > 0.0 ? "Нет данных" : route.TransporterRating)</div> -->
                                    </div>


                                <div class="mt-3 d-flex align-items-center">
                                    <a href="/Route/RouteDetails?routeID=@route.RouteId" class="btn btn-outline-primary btn-sm">Подробнее</a>
                                    <!-- Блок популярности маршрута -->
                                    @if (route.RouteOrderStats > 0)
                                    {
                                        string wordForm;
                                        int lastDigit = route.RouteOrderStats % 10;
                                        int lastTwoDigits = route.RouteOrderStats % 100;

                                        if (lastTwoDigits >= 11 && lastTwoDigits <= 19)
                                            wordForm = "пользователей выбрали";
                                        else if (lastDigit == 1)
                                            wordForm = "пользователь выбрал";
                                        else if (lastDigit >= 2 && lastDigit <= 4)
                                            wordForm = "пользователя выбрали";
                                        else
                                            wordForm = "пользователей выбрали";

                                        <button class="btn btn-outline-light btn-sm text-primary border-0" data-bs-toggle="tooltip" data-bs-placement="top"
                                                title="@wordForm этот маршрут">
                                            <i class="bi bi-people-fill"></i> @route.RouteOrderStats
                                        </button>
                                    }
    
                                </div>
                            </div>
                        </div>
                    </div>
                }

            }

          
        </div>
    </div>



</section>

@if (ViewBag.SearchType == "ByName")
{
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            // Находим все карточки маршрутов
            const routeCards = document.querySelectorAll(".route-card");

            routeCards.forEach(card => {
                card.addEventListener("click", async function () {
                    const routeId = this.getAttribute("data-route-id");

                    try {
                        // Убираем выделение с других карточек
                        routeCards.forEach(c => c.classList.remove("selected"));

                        // Добавляем выделение к текущей карточке
                        this.classList.add("selected");

                        // Отправляем запрос на сервер для получения начальной и конечной остановки
                        const response = await fetch(`/Route/GetRouteEndpoints?routeId=${routeId}`);
                        if (!response.ok) {
                            throw new Error("Ошибка при получении данных остановок");
                        }

                        const data = await response.json();
                        if (data.success) {
                            // Обновляем поля "откуда" и "куда"
                            document.getElementById("startStopField").textContent = "Остановка \"" + data.startStopName + "\"";
                            document.getElementById("endStopField").textContent = "Остановка \"" +  data.endStopName + "\"";
                        } else {
                            console.error("Ошибка: ", data.error);
                        }
                    } catch (error) {
                        console.error("Ошибка при обработке клика на карточку маршрута:", error);
                    }
                });
            });
        });
    </script>
}

<!-- Скрипт фильтрации и сортировки - работает всегда, независимо от метода поиска -->
<script>
       document.addEventListener("DOMContentLoaded", function () {

           
        const tooltipTriggerList = document.querySelectorAll('[data-bs-toggle="tooltip"]');
        const tooltipList = [...tooltipTriggerList].map(tooltipTriggerEl => new bootstrap.Tooltip(tooltipTriggerEl));


        // Добавляем атрибуты data-rating к карточкам маршрутов
        const cards = document.querySelectorAll(".route-card");

        // Функция склонения слов
        function getCorrectWordForm(number, form1, form2, form5) {
            const lastDigit = number % 10;
            const lastTwoDigits = number % 100;

            if (lastTwoDigits >= 11 && lastTwoDigits <= 19)
                return form5;

            switch (lastDigit) {
                case 1:
                    return form1;
                case 2:
                case 3:
                case 4:
                    return form2;
                default:
                    return form5;
            }
        }

        // Применяем склонение к элементам с классом order-word-form
        document.querySelectorAll('.order-word-form').forEach(element => {
            const count = parseInt(element.getAttribute('data-count'));
            element.textContent = getCorrectWordForm(count,
                "пользователь выбрал",
                "пользователя выбрали",
                "пользователей выбрали");
        });

        // Добавляем атрибуты data-rating к карточкам маршрутов
        cards.forEach(card => {
            // Находим элемент с рейтингом внутри карточки
            const ratingBadge = card.querySelector(".badge");
            if (ratingBadge) {
                // Извлекаем значение рейтинга из текста
                const ratingText = ratingBadge.textContent;
                let rating = 0;

                if (ratingText.includes("Рейтинг :")) {
                    const ratingValue = ratingText.split(":")[1].trim();
                    if (ratingValue !== "Нет данных") {
                        rating = parseFloat(ratingValue);
                    }
                }

                // Добавляем атрибут data-rating
                card.setAttribute("data-rating", rating);
            }

            // Находим элемент с количеством заказов внутри карточки
            const popularityElement = card.querySelector(".popularity-badge .fw-bold");
            if (popularityElement) {
                const popularity = parseInt(popularityElement.textContent) || 0;
                // Добавляем атрибут data-popularity
                card.setAttribute("data-popularity", popularity);
            } else {
                // Если элемент не найден, устанавливаем значение 0
                card.setAttribute("data-popularity", 0);
            }
        });

        const ratingFilter = document.getElementById("ratingFilter");
        const sortOrder = document.getElementById("sortOrder");
        const routesContainer = document.querySelector(".routes-container")?.parentNode;

        if (!routesContainer) return;

        // Функция для фильтрации и сортировки маршрутов
        function filterAndSortRoutes() {
            const cards = Array.from(document.querySelectorAll(".route-card"));
            const selectedRating = ratingFilter.value;
            const selectedSort = sortOrder.value;

            // Сохраняем все родительские контейнеры карточек
            const routeContainers = Array.from(document.querySelectorAll(".routes-container"));

            // Фильтруем карточки
            cards.forEach(card => {
                const rating = parseFloat(card.getAttribute("data-rating") || "0");
                let shouldShow = true;

                switch (selectedRating) {
                    case "all":
                        shouldShow = true;
                        break;
                    case "no-rating":
                        shouldShow = rating < 1;
                        break;
                    case "4":
                        shouldShow = rating >= 4;
                        break;
                    case "3":
                        shouldShow = rating >= 3;
                        break;
                    case "2":
                        shouldShow = rating >= 2;
                        break;
                    case "1":
                        shouldShow = rating >= 1;
                        break;
                }

                // Находим родительский контейнер карточки
                const container = card.closest(".routes-container");
                if (container) {
                    container.style.display = shouldShow ? "" : "none";
                }
            });

            // Сортировка карточек
            const sortedCards = cards.filter(card => {
                const container = card.closest(".routes-container");
                return container && container.style.display !== "none";
            }).sort((a, b) => {
                const ratingA = parseFloat(a.getAttribute("data-rating") || "0");
                const ratingB = parseFloat(b.getAttribute("data-rating") || "0");
                const popularityA = parseInt(a.getAttribute("data-popularity") || "0");
                const popularityB = parseInt(b.getAttribute("data-popularity") || "0");

                switch (selectedSort) {
                    case "rating-desc":
                        return ratingB - ratingA;
                    case "rating-asc":
                        return ratingA - ratingB;
                    case "popularity-desc":
                        return popularityB - popularityA;
                    case "popularity-asc":
                        return popularityA - popularityB;
                    default:
                        return ratingB - ratingA;
                }
                    const sortBadge = document.getElementById("sortBadge") || document.createElement("div");
                    sortBadge.id = "sortBadge";
                    sortBadge.className = "badge bg-primary mt-2 mb-3";

                    switch (selectedSort) {
                        case "rating-desc":
                            sortBadge.innerHTML = '<i class="bi bi-star-fill me-1"></i> Сортировка по убыванию рейтинга';
                            break;
                        case "rating-asc":
                            sortBadge.innerHTML = '<i class="bi bi-star me-1"></i> Сортировка по возрастанию рейтинга';
                            break;
                        case "popularity-desc":
                            sortBadge.innerHTML = '<i class="bi bi-people-fill me-1"></i> Сортировка по убыванию популярности';
                            break;
                        case "popularity-asc":
                            sortBadge.innerHTML = '<i class="bi bi-people me-1"></i> Сортировка по возрастанию популярности';
                            break;
                    }

                    // Размещаем бейдж перед контейнером с маршрутами
                    const routesHeader = document.querySelector(".routes-header");
                    if (routesHeader && !document.getElementById("sortBadge")) {
                        routesHeader.appendChild(sortBadge);
                    }
            });

            // Если нет видимых карточек, показываем сообщение
            const noResultsMsg = document.getElementById("noResultsMessage") || document.createElement("div");
            noResultsMsg.id = "noResultsMessage";
            noResultsMsg.className = "alert alert-info mt-3";
            noResultsMsg.innerHTML = "Маршрутов с указанным фильтром не найдено";

            const visibleCount = routeContainers.filter(c => c.style.display !== "none").length;

            if (visibleCount === 0) {
                if (!document.getElementById("noResultsMessage")) {
                    routesContainer.appendChild(noResultsMsg);
                }
            } else {
                if (document.getElementById("noResultsMessage")) {
                    document.getElementById("noResultsMessage").remove();
                }

                // Переупорядочиваем карточки согласно сортировке
                sortedCards.forEach(card => {
                    const container = card.closest(".routes-container");
                    routesContainer.appendChild(container);
                });
            }
        }

        // Добавляем обработчики событий для элементов фильтра
        ratingFilter.addEventListener("change", filterAndSortRoutes);
        sortOrder.addEventListener("change", filterAndSortRoutes);
    });
</script>