@using WaterProj.Extensions
@model WaterProj.DTOs.ConsumerAccontDto
@{
    ViewData["Title"] = "Личный кабинет";
}

<section class="bg2 py-4">
    <div class="container">
        <div class="row mb-4">
            <div class="col-12">
                <h2 class="text-center text-uppercase text-secondary">Личный кабинет</h2>
                <hr class="my-3 mx-auto w-50">
            </div>
        </div>
        
        <div class="row">
            <!-- Информация о пользователе -->
            <div class="col-md-5 col-lg-4 mb-4">
                <div class="card shadow-lg h-100 rounded-3 border-0">
                    <div class="card-body">
                        <h3 class="card-title text-primary mb-4">Мой профиль</h3>
                        <!-- Фото пользователя -->
                        <div class="text-center mb-4">
                            @if (!string.IsNullOrEmpty(Model.Consumer.ProfileImagePath))
                            {
                                <img src="@Model.Consumer.ProfileImagePath" alt="Аватар" class="rounded-circle img-thumbnail shadow" style="width: 150px; height: 150px; object-fit: cover;" />
                            }
                            else
                            {
                                <img src="/images/avatars/default-avatar.jpg" alt="Аватар по умолчанию" class="rounded-circle img-thumbnail shadow" style="width: 150px; height: 150px; object-fit: cover;" />
                            }
                            
                            <h5 class="mt-3 mb-1">@Model.Consumer.Name @Model.Consumer.Surname</h5>
                            <p class="text-muted mb-0">@Model.Consumer.Login</p>
                        </div>

                        <!-- Форма загрузки фото -->
                        <form asp-action="UpdateProfileImage" method="post" enctype="multipart/form-data" class="mb-4">
                            <div class="input-group">
                                <input type="file" name="profileImage" class="form-control form-control-sm" accept="image/jpeg,image/png,image/gif" required>
                                <button type="submit" class="btn btn-primary btn-sm">
                                    <i class="bi bi-upload"></i>
                                </button>
                            </div>
                            <div class="form-text text-muted small">Макс. размер: 5MB. Форматы: JPEG, PNG, GIF</div>
                        </form>
                        
                        <!-- Кнопки действий -->
                        <div class="d-grid gap-2 mt-4">
                            <button id="editButton" type="button" class="btn btn-outline-primary">
                                <i class="bi bi-pencil"></i> Редактировать профиль
                            </button>
                            <button type="button" class="btn btn-outline-secondary" data-bs-toggle="modal" data-bs-target="#changePasswordModal">
                                <i class="bi bi-key"></i> Изменить пароль
                            </button>
                            <form asp-action="Logout" method="post">
                                <button type="submit" class="btn btn-outline-danger w-100 mt-2">
                                    <i class="bi bi-box-arrow-right"></i> Выйти
                                </button>
                            </form>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Данные пользователя и заказы -->
            <div class="col-md-7 col-lg-8">
                <!-- Форма редактирования данных -->
                <div class="card shadow-lg mb-4 rounded-3 border-0">
                    <div class="card-body">
                        <h3 class="card-title text-primary mb-4">Персональные данные</h3>
                        
                        <form asp-action="Edit" method="post" id="editForm">
                            <div class="row">
                                <div class="col-md-6 mb-3">
                                    <div class="form-floating">
                                        <input name="Name" value="@Model.Consumer.Name" class="form-control" id="name" placeholder="Имя" readonly="readonly" />
                                        <label for="name">Имя</label>
                                    </div>
                                </div>
                                <div class="col-md-6 mb-3">
                                    <div class="form-floating">
                                        <input name="Surname" value="@Model.Consumer.Surname" class="form-control" id="surname" placeholder="Фамилия" readonly="readonly" />
                                        <label for="surname">Фамилия</label>
                                    </div>
                                </div>
                            </div>
                            
                            <div class="row">
                                <div class="col-md-6 mb-3">
                                    <div class="form-floating">
                                        <input name="Phone" value="@Model.Consumer.Phone" class="form-control" id="phone" placeholder="Телефон" readonly="readonly" />
                                        <label for="phone">Телефон</label>
                                    </div>
                                </div>
                                <div class="col-md-6 mb-3">
                                    <div class="form-floating">
                                        <input name="Login" value="@Model.Consumer.Login" class="form-control" id="login" placeholder="Логин" readonly="readonly" />
                                        <label for="login">Логин</label>
                                    </div>
                                </div>
                            </div>

                        </form>
                    </div>
                </div>
                
                <!-- Заказы пользователя -->
                <div class="card shadow-lg rounded-3 border-0">
                    <div class="card-body">
                        <div class="d-flex justify-content-between align-items-center mb-3">
                            <h3 class="card-title text-primary mb-0">Мои заказы</h3>
                            <div class="form-check form-switch">
                                <input class="form-check-input" type="checkbox" role="switch" id="hideCompletedOrders">
                                <label class="form-check-label" for="hideCompletedOrders">Скрыть отмененные</label>
                            </div>
                        </div>
                        
                        @if (Model.OrdersRoutesDto.Any())
                        {
                            <div class="accordion" id="ordersAccordion">
                                @foreach (var dto in Model.OrdersRoutesDto)
                                {
                                    <div class="accordion-item border mb-3 rounded shadow-sm" data-status="@dto.Order.Status">
                                        <h2 class="accordion-header" id="heading-@dto.Order.OrderId">
                                            <button class="accordion-button collapsed"
                                                    type="button"
                                                    data-bs-toggle="collapse"
                                                    data-bs-target="#collapse-@dto.Order.OrderId"
                                                    aria-expanded="false"
                                                    aria-controls="collapse-@dto.Order.OrderId">
                                                <div class="d-flex justify-content-between align-items-center w-100 pe-3">
                                                    <span>
                                                        <strong>№@dto.Order.OrderId</strong>: @dto.Route.Name
                                                    </span>
                                                    <span class="badge ms-2
                                                    @(dto.Order.Status == OrderStatus.Canceled ? "bg-danger" :
                                                      dto.Order.Status == OrderStatus.Active ? "bg-warning text-dark" :
                                                      dto.Order.Status == OrderStatus.Completed ? "bg-success" : "bg-secondary")">
                                                      @dto.Order.Status.GetDisplayName()
                                                    </span>
                                                </div>
                                            </button>
                                        </h2>
                                        <div id="collapse-@dto.Order.OrderId" 
                                             class="accordion-collapse collapse" 
                                             aria-labelledby="heading-@dto.Order.OrderId" 
                                             data-bs-parent="#ordersAccordion">
                                            <div class="accordion-body">
                                                <div class="mb-3">
                                                    <p class="mb-2"><strong>Дата заказа:</strong> @dto.Order.CreatedAt.ToString("dd.MM.yyyy HH:mm")</p>
                                                    <p class="mb-2"><strong>Маршрут:</strong> @dto.Route.Name</p>
                                                    @if (!string.IsNullOrEmpty(dto.Route.Description))
                                                    {
                                                        <p class="mb-2"><strong>Описание:</strong> @dto.Route.Description</p>
                                                    }
                                                </div>
                                                
                                                <div class="d-flex justify-content-end">
                                                    <a href="@Url.Action("RouteDetails", "Route", new { routeID = dto.Order.RouteId })" class="btn btn-outline-primary btn-sm me-2">
                                                        <i class="bi bi-eye"></i> Подробнее
                                                    </a>
                                                    @if (dto.Order.Status == OrderStatus.Active)
                                                    {
                                                        <a href="@Url.Action("CancelOrder", "Order", new { OrderId = dto.Order.OrderId })" class="btn btn-outline-danger btn-sm me-2">
                                                            <i class="bi bi-x-circle"></i> Отменить
                                                        </a>
                                                    }
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                }
                            </div>
                        }
                        else
                        {
                            <div class="alert alert-info">
                                <i class="bi bi-info-circle me-2"></i> У вас пока нет заказов. Найдите интересный маршрут!
                            </div>
                            <div class="text-center">
                                <a href="@Url.Action("FindRoutes", "Route")" class="btn btn-primary">
                                    <i class="bi bi-search"></i> Найти маршруты
                                </a>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

<!-- Модальное окно для изменения пароля -->
<div class="modal fade" id="changePasswordModal" tabindex="-1" aria-labelledby="changePasswordModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="changePasswordModalLabel">Изменение пароля</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form asp-action="ChangePassword" method="post" id="changePasswordForm">
                <div class="modal-body">
                    <div class="mb-3">
                        <label for="currentPassword" class="form-label">Текущий пароль</label>
                        <input type="password" class="form-control" id="currentPassword" name="CurrentPassword" required>
                    </div>
                    <div class="mb-3">
                        <label for="newPassword" class="form-label">Новый пароль</label>
                        <input type="password" class="form-control" id="newPassword" name="NewPassword" required>
                    </div>
                    <div class="mb-3">
                        <label for="confirmPassword" class="form-label">Подтвердите новый пароль</label>
                        <input type="password" class="form-control" id="confirmPassword" name="ConfirmPassword" required>
                        <div id="passwordMatchError" class="text-danger mt-1 d-none">Пароли не совпадают</div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Отмена</button>
                    <button type="submit" class="btn btn-primary" id="savePasswordButton">Сохранить</button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Обработчик для кнопки редактирования
        const editButton = document.getElementById('editButton');
        const nameInput = document.getElementById('name');
        const surnameInput = document.getElementById('surname');
        const phoneInput = document.getElementById('phone');
        const loginInput = document.getElementById('login');
        const form = document.getElementById('editForm');

        let editing = false;
        let formIsValid = false; // Флаг валидности формы

        // Функция для обновления состояния кнопки сохранения
        function updateSaveButtonState() {
            if (editing) {
                editButton.disabled = !formIsValid;
                // Визуальное оформление в зависимости от валидности
                if (formIsValid) {
                    editButton.classList.add('btn-success');
                    editButton.classList.remove('btn-secondary');
                } else {
                    editButton.classList.remove('btn-success');
                    editButton.classList.add('btn-secondary');
                }
            }
        }

        editButton.addEventListener('click', () => {
            if (editing) {
                // Если мы уже в режиме редактирования и нажали кнопку сохранить
                if (formIsValid) {
                    // Отправляем форму только если данные валидны
                    form.submit();
                    // Переключаем режим редактирования
                    editing = false;
                    // Обновляем состояние полей ввода
                    nameInput.readOnly = true;
                    surnameInput.readOnly = true;
                    phoneInput.readOnly = true;
                    loginInput.readOnly = true;
                    // Меняем внешний вид кнопки обратно
                    editButton.innerHTML = '<i class="bi bi-pencil"></i> Редактировать профиль';
                    editButton.classList.remove('btn-success', 'btn-secondary');
                    editButton.classList.add('btn-outline-primary');
                    editButton.disabled = false;
                }
                // Если данные не прошли валидацию, кнопка будет неактивна
            } else {
                // Если мы не в режиме редактирования, просто включаем его
                editing = true;

                // Обновляем состояние полей ввода
                nameInput.readOnly = false;
                surnameInput.readOnly = false;
                phoneInput.readOnly = false;
                loginInput.readOnly = false;

                // Меняем внешний вид кнопки
                editButton.innerHTML = '<i class="bi bi-check-lg"></i> Сохранить';
                editButton.classList.remove('btn-outline-primary');
                editButton.classList.add('btn-success');

                // Сразу проверяем валидность и устанавливаем состояние кнопки
                formIsValid = validateProfileForm();
                updateSaveButtonState();

                // Добавляем обработчики событий для полей ввода
                setupFieldValidation();
            }
        });

        // Функция настройки валидации полей ввода в реальном времени
        function setupFieldValidation() {
            // Очищаем предыдущие обработчики (если были)
            nameInput.removeEventListener('input', validateField);
            surnameInput.removeEventListener('input', validateField);
            phoneInput.removeEventListener('input', validateField);
            loginInput.removeEventListener('input', validateField);

            // Добавляем новые обработчики
            nameInput.addEventListener('input', validateField);
            surnameInput.addEventListener('input', validateField);
            phoneInput.addEventListener('input', validateField);
            loginInput.addEventListener('input', validateField);

            // Также добавляем обработчики потери фокуса для более явной валидации
            nameInput.addEventListener('blur', validateField);
            surnameInput.addEventListener('blur', validateField);
            phoneInput.addEventListener('blur', validateField);
            loginInput.addEventListener('blur', validateField);
        }

               // Функция для валидации отдельного поля
        function validateField(event) {
            const field = event.target;

            // Очищаем ошибку для данного поля
            clearFieldError(field);

            // Валидируем поле в зависимости от его id
            switch(field.id) {
                case 'name':
                    if (!field.value.trim()) {
                        showError(field, 'Введите имя');
                    } else {
                        const nameRegex = /^[А-ЯЁа-яёA-Za-z\s-]+$/;
                        if (!nameRegex.test(field.value)) {
                            showError(field, 'Имя может содержать только буквы, пробелы и дефисы');
                        }
                    }
                    break;
                case 'surname':
                    if (!field.value.trim()) {
                        showError(field, 'Введите фамилию');
                    } else {
                        const surnameRegex = /^[А-ЯЁа-яёA-Za-z\s-]+$/;
                        if (!surnameRegex.test(field.value)) {
                            showError(field, 'Фамилия может содержать только буквы, пробелы и дефисы');
                        }
                    }
                    break;
                case 'phone':
                    if (!field.value.trim()) {
                        showError(field, 'Введите номер телефона');
                    } else {
                        const phoneRegex = /^(\+7|7|8)?[\s\-]?\(?[0-9]{3}\)?[\s\-]?[0-9]{3}[\s\-]?[0-9]{2}[\s\-]?[0-9]{2}$/;
                        if (!phoneRegex.test(field.value)) {
                            showError(field, 'Неверный формат телефона');
                        }
                    }
                    break;
                case 'login':
                    if (!field.value.trim()) {
                        showError(field, 'Введите логин');
                    } else if (field.value.length < 4) {
                        showError(field, 'Логин должен содержать минимум 4 символа');
                    } else {
                        // Проверяем, что логин не изменился
                        const originalLogin = field.getAttribute('data-original-value') || field.defaultValue;
                        if (field.value !== originalLogin) {
                            // Асинхронная проверка доступности логина
                            checkLoginAvailability(field.value);
                        }
                    }
                    break;
            }

            // Проверяем всю форму и обновляем состояние кнопки
            formIsValid = validateProfileForm(false); // без отображения ошибок
            updateSaveButtonState();
        }

        // Функция для проверки доступности логина
        async function checkLoginAvailability(login) {
            try {
                // Добавляем индикатор загрузки
                loginInput.classList.add('checking');

                // Выполняем запрос к серверу
                const response = await fetch(`/ConsumerAccount/CheckLoginAvailability?login=${encodeURIComponent(login)}`);
                const data = await response.json();

                // Удаляем индикатор загрузки
                loginInput.classList.remove('checking');

                if (!data.available) {
                    showError(loginInput, data.message || 'Этот логин уже занят');
                    formIsValid = false;
                    updateSaveButtonState();
                }
            } catch (error) {
                console.error('Ошибка при проверке логина:', error);
                loginInput.classList.remove('checking');
            }
        }

        // Очистка ошибки только для конкретного поля
        function clearFieldError(field) {
            field.classList.remove('is-invalid');
            const errorMessages = field.parentNode.querySelectorAll('.invalid-feedback');
            errorMessages.forEach(errorMsg => {
                errorMsg.remove();
            });
        }

        // Функция валидации формы профиля
        function validateProfileForm(showErrors = true) {
            // Если showErrors=false, то ошибки не отображаются, а только проверяется валидность
            if (showErrors) {
                clearValidationErrors();
            }

            let isValid = true;

        // Проверка имени
        if (!nameInput.value.trim()) {
            if (showErrors) showError(nameInput, 'Введите имя');
            isValid = false;
        } else {
            const nameRegex = /^[А-ЯЁа-яёA-Za-z\s-]+$/;
            if (!nameRegex.test(nameInput.value)) {
                if (showErrors) showError(nameInput, 'Имя может содержать только буквы, пробелы и дефисы');
                isValid = false;
            }
        }

        // Проверка фамилии
        if (!surnameInput.value.trim()) {
            if (showErrors) showError(surnameInput, 'Введите фамилию');
            isValid = false;
        } else {
            const surnameRegex = /^[А-ЯЁа-яёA-Za-z\s-]+$/;
            if (!surnameRegex.test(surnameInput.value)) {
                if (showErrors) showError(surnameInput, 'Фамилия может содержать только буквы, пробелы и дефисы');
                isValid = false;
            }
        }

            // Проверка телефона
            if (!phoneInput.value.trim()) {
                if (showErrors) showError(phoneInput, 'Введите номер телефона');
                isValid = false;
            } else {
                // Проверка формата телефона с использованием регулярного выражения
                const phoneRegex = /^(\+7|7|8)?[\s\-]?\(?[0-9]{3}\)?[\s\-]?[0-9]{3}[\s\-]?[0-9]{2}[\s\-]?[0-9]{2}$/;
                if (!phoneRegex.test(phoneInput.value)) {
                    if (showErrors) showError(phoneInput, 'Неверный формат телефона');
                    isValid = false;
                }
            }

            // Проверка логина
            if (!loginInput.value.trim()) {
                if (showErrors) showError(loginInput, 'Введите логин');
                isValid = false;
            } else if (loginInput.value.length < 4) {
                if (showErrors) showError(loginInput, 'Логин должен содержать минимум 4 символа');
                isValid = false;
            }

            return isValid;
        }

        // Функция для отображения ошибки валидации
        function showError(inputElement, errorMessage) {
            inputElement.classList.add('is-invalid');

            // Создаем элемент с сообщением об ошибке, если его еще нет
            const existingError = inputElement.parentNode.querySelector('.invalid-feedback');
            if (!existingError) {
                const errorDiv = document.createElement('div');
                errorDiv.className = 'invalid-feedback';
                errorDiv.innerText = errorMessage;

                // Добавляем сообщение об ошибке после поля ввода
                inputElement.parentNode.appendChild(errorDiv);
            }
        }

        // Функция для очистки ошибок валидации
        function clearValidationErrors() {
            const invalidInputs = document.querySelectorAll('.is-invalid');
            invalidInputs.forEach(input => {
                input.classList.remove('is-invalid');
            });

            const errorMessages = document.querySelectorAll('.invalid-feedback');
            errorMessages.forEach(errorMsg => {
                errorMsg.remove();
            });
        }

        // Проверка совпадения паролей
        const newPasswordInput = document.getElementById('newPassword');
        const confirmPasswordInput = document.getElementById('confirmPassword');
        const passwordMatchError = document.getElementById('passwordMatchError');
        const savePasswordButton = document.getElementById('savePasswordButton');

        function checkPasswordMatch() {
            if (newPasswordInput.value && confirmPasswordInput.value) {
                if (newPasswordInput.value !== confirmPasswordInput.value) {
                    passwordMatchError.classList.remove('d-none');
                    savePasswordButton.disabled = true;
                } else {
                    passwordMatchError.classList.add('d-none');
                    savePasswordButton.disabled = false;
                }
            }
        }

        newPasswordInput.addEventListener('input', checkPasswordMatch);
        confirmPasswordInput.addEventListener('input', checkPasswordMatch);

        // Обработчик для чекбокса фильтрации отмененных заказов
        const hideCompletedOrdersCheckbox = document.getElementById('hideCompletedOrders');
        const orderItems = document.querySelectorAll('.accordion-item[data-status]');

        hideCompletedOrdersCheckbox.addEventListener('change', function() {
            const hideOrders = this.checked;

            orderItems.forEach(item => {
                if (item.getAttribute('data-status') === 'Canceled') {
                    if (hideOrders) {
                        item.classList.add('d-none');
                    } else {
                        item.classList.remove('d-none');
                    }
                }
            });

            // Проверяем, есть ли видимые элементы после фильтрации
            const visibleItems = document.querySelectorAll('.accordion-item:not(.d-none)');
            const noOrdersMessage = document.getElementById('noOrdersAfterFilter');

            // Если сообщение уже существует, удаляем его
            if (noOrdersMessage) {
                noOrdersMessage.remove();
            }

            // Если после фильтрации не осталось видимых элементов, показываем сообщение
            if (hideOrders && visibleItems.length === 0) {
                const accordionContainer = document.getElementById('ordersAccordion');
                const message = document.createElement('div');
                message.id = 'noOrdersAfterFilter';
                message.className = 'alert alert-info mt-3';
                message.innerHTML = '<i class="bi bi-info-circle me-2"></i> Нет активных заказов.';
                accordionContainer.parentNode.insertBefore(message, accordionContainer.nextSibling);
            }
        });
    </script>
}