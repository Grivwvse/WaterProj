// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using WaterProj.DB;

#nullable disable

namespace WaterProj.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("WaterProj.Models.Administrator", b =>
                {
                    b.Property<int>("AdminId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AdminId"));

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("AdminId");

                    b.ToTable("Administrators");
                });

            modelBuilder.Entity("WaterProj.Models.Advantage", b =>
                {
                    b.Property<int>("AdvantageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AdvantageId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("AdvantageId");

                    b.ToTable("Advantages");
                });

            modelBuilder.Entity("WaterProj.Models.Consumer", b =>
                {
                    b.Property<int>("ConsumerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ConsumerId"));

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProfileImagePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ConsumerId");

                    b.ToTable("Consumers");
                });

            modelBuilder.Entity("WaterProj.Models.Image", b =>
                {
                    b.Property<int>("ImageID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ImageID"));

                    b.Property<int>("EntityId")
                        .HasColumnType("integer");

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ImageID");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("WaterProj.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("OrderId"));

                    b.Property<int>("ConsumerId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsFeedback")
                        .HasColumnType("boolean");

                    b.Property<int>("RouteId")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("OrderId");

                    b.HasIndex("ConsumerId");

                    b.HasIndex("RouteId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("WaterProj.Models.Route", b =>
                {
                    b.Property<int>("RouteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RouteId"));

                    b.Property<string>("BlockReason")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("boolean");

                    b.Property<string>("Map")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Price")
                        .HasColumnType("integer");

                    b.Property<float>("Rating")
                        .HasColumnType("real");

                    b.Property<string>("Schedule")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ShipId")
                        .HasColumnType("integer");

                    b.Property<int>("TransporterId")
                        .HasColumnType("integer");

                    b.HasKey("RouteId");

                    b.HasIndex("ShipId");

                    b.HasIndex("TransporterId");

                    b.ToTable("Routes");
                });

            modelBuilder.Entity("WaterProj.Models.RouteDay", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("integer");

                    b.Property<int>("RouteId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RouteId");

                    b.ToTable("RouteDays");
                });

            modelBuilder.Entity("WaterProj.Models.RouteRating", b =>
                {
                    b.Property<int>("RouteRatingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RouteRatingId"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("ConsumerId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NegativeComments")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("PositiveComments")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("RouteId")
                        .HasColumnType("integer");

                    b.Property<int>("Stars")
                        .HasColumnType("integer");

                    b.HasKey("RouteRatingId");

                    b.HasIndex("ConsumerId");

                    b.HasIndex("RouteId");

                    b.ToTable("RouteRatings");
                });

            modelBuilder.Entity("WaterProj.Models.RouteRatingAdvantage", b =>
                {
                    b.Property<int>("RouteRatingAdvantageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RouteRatingAdvantageId"));

                    b.Property<int>("AdvantageId")
                        .HasColumnType("integer");

                    b.Property<int>("RouteRatingId")
                        .HasColumnType("integer");

                    b.HasKey("RouteRatingAdvantageId");

                    b.HasIndex("AdvantageId");

                    b.HasIndex("RouteRatingId");

                    b.ToTable("RouteRatingAdvantages");
                });

            modelBuilder.Entity("WaterProj.Models.RouteStop", b =>
                {
                    b.Property<int>("RouteStopId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RouteStopId"));

                    b.Property<int>("RouteId")
                        .HasColumnType("integer");

                    b.Property<int>("StopId")
                        .HasColumnType("integer");

                    b.Property<int>("StopOrder")
                        .HasColumnType("integer");

                    b.HasKey("RouteStopId");

                    b.HasIndex("RouteId");

                    b.HasIndex("StopId");

                    b.ToTable("RouteStop");
                });

            modelBuilder.Entity("WaterProj.Models.Ship", b =>
                {
                    b.Property<int>("ShipId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ShipId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IMO")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ShipTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("TransporterId")
                        .HasColumnType("integer");

                    b.HasKey("ShipId");

                    b.HasIndex("ShipTypeId");

                    b.HasIndex("TransporterId");

                    b.ToTable("Ships");
                });

            modelBuilder.Entity("WaterProj.Models.ShipImage", b =>
                {
                    b.Property<int>("ShipImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ShipImageId"));

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ShipId")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("ShipImageId");

                    b.HasIndex("ShipId");

                    b.ToTable("ShipImages");
                });

            modelBuilder.Entity("WaterProj.Models.ShipType", b =>
                {
                    b.Property<int>("ShipTypesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ShipTypesId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ShipTypesId");

                    b.ToTable("ShipTypes");
                });

            modelBuilder.Entity("WaterProj.Models.ShipСonvenience", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ShipId")
                        .HasColumnType("integer");

                    b.Property<int>("СonvenienceId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ShipId");

                    b.HasIndex("СonvenienceId");

                    b.ToTable("ShipСonveniences");
                });

            modelBuilder.Entity("WaterProj.Models.Stop", b =>
                {
                    b.Property<int>("StopId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("StopId"));

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("StopId");

                    b.ToTable("Stops");
                });

            modelBuilder.Entity("WaterProj.Models.Transporter", b =>
                {
                    b.Property<int>("TransporterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TransporterId"));

                    b.Property<string>("BlockReason")
                        .HasColumnType("text");

                    b.Property<DateTime?>("BlockedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("boolean");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float>("Rating")
                        .HasColumnType("real");

                    b.HasKey("TransporterId");

                    b.ToTable("Transporters");
                });

            modelBuilder.Entity("WaterProj.Models.WaterProj.Models.ReviewImage", b =>
                {
                    b.Property<int>("ReviewImageID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ReviewImageID"));

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RouteRatingId")
                        .HasColumnType("integer");

                    b.HasKey("ReviewImageID");

                    b.HasIndex("RouteRatingId");

                    b.ToTable("ReviewImages");
                });

            modelBuilder.Entity("WaterProj.Models.Сonvenience", b =>
                {
                    b.Property<int>("ShipСonvenienceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ShipСonvenienceId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ShipСonvenienceId");

                    b.ToTable("Сonveniences");
                });

            modelBuilder.Entity("WaterProj.Models.Order", b =>
                {
                    b.HasOne("WaterProj.Models.Consumer", "Consumer")
                        .WithMany("Orders")
                        .HasForeignKey("ConsumerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WaterProj.Models.Route", "Route")
                        .WithMany("Orders")
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Consumer");

                    b.Navigation("Route");
                });

            modelBuilder.Entity("WaterProj.Models.Route", b =>
                {
                    b.HasOne("WaterProj.Models.Ship", "Ship")
                        .WithMany("Routes")
                        .HasForeignKey("ShipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WaterProj.Models.Transporter", "Transporter")
                        .WithMany("Routes")
                        .HasForeignKey("TransporterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ship");

                    b.Navigation("Transporter");
                });

            modelBuilder.Entity("WaterProj.Models.RouteDay", b =>
                {
                    b.HasOne("WaterProj.Models.Route", "Route")
                        .WithMany("RouteDays")
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Route");
                });

            modelBuilder.Entity("WaterProj.Models.RouteRating", b =>
                {
                    b.HasOne("WaterProj.Models.Consumer", "Consumer")
                        .WithMany()
                        .HasForeignKey("ConsumerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WaterProj.Models.Route", "Route")
                        .WithMany()
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Consumer");

                    b.Navigation("Route");
                });

            modelBuilder.Entity("WaterProj.Models.RouteRatingAdvantage", b =>
                {
                    b.HasOne("WaterProj.Models.Advantage", "Advantage")
                        .WithMany("RouteRatingAdvantages")
                        .HasForeignKey("AdvantageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WaterProj.Models.RouteRating", "RouteRating")
                        .WithMany("RouteRatingAdvantages")
                        .HasForeignKey("RouteRatingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Advantage");

                    b.Navigation("RouteRating");
                });

            modelBuilder.Entity("WaterProj.Models.RouteStop", b =>
                {
                    b.HasOne("WaterProj.Models.Route", "Route")
                        .WithMany("RouteStops")
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WaterProj.Models.Stop", "Stop")
                        .WithMany("RouteStops")
                        .HasForeignKey("StopId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Route");

                    b.Navigation("Stop");
                });

            modelBuilder.Entity("WaterProj.Models.Ship", b =>
                {
                    b.HasOne("WaterProj.Models.ShipType", "ShipType")
                        .WithMany("Ships")
                        .HasForeignKey("ShipTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WaterProj.Models.Transporter", "Transporter")
                        .WithMany("Ships")
                        .HasForeignKey("TransporterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ShipType");

                    b.Navigation("Transporter");
                });

            modelBuilder.Entity("WaterProj.Models.ShipImage", b =>
                {
                    b.HasOne("WaterProj.Models.Ship", "Ship")
                        .WithMany("ShipImages")
                        .HasForeignKey("ShipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ship");
                });

            modelBuilder.Entity("WaterProj.Models.ShipСonvenience", b =>
                {
                    b.HasOne("WaterProj.Models.Ship", "Ship")
                        .WithMany("ShipСonveniences")
                        .HasForeignKey("ShipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WaterProj.Models.Сonvenience", "Сonvenience")
                        .WithMany("ShipСonveniences")
                        .HasForeignKey("СonvenienceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ship");

                    b.Navigation("Сonvenience");
                });

            modelBuilder.Entity("WaterProj.Models.WaterProj.Models.ReviewImage", b =>
                {
                    b.HasOne("WaterProj.Models.RouteRating", "RouteRating")
                        .WithMany("ReviewImages")
                        .HasForeignKey("RouteRatingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RouteRating");
                });

            modelBuilder.Entity("WaterProj.Models.Advantage", b =>
                {
                    b.Navigation("RouteRatingAdvantages");
                });

            modelBuilder.Entity("WaterProj.Models.Consumer", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("WaterProj.Models.Route", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("RouteDays");

                    b.Navigation("RouteStops");
                });

            modelBuilder.Entity("WaterProj.Models.RouteRating", b =>
                {
                    b.Navigation("ReviewImages");

                    b.Navigation("RouteRatingAdvantages");
                });

            modelBuilder.Entity("WaterProj.Models.Ship", b =>
                {
                    b.Navigation("Routes");

                    b.Navigation("ShipImages");

                    b.Navigation("ShipСonveniences");
                });

            modelBuilder.Entity("WaterProj.Models.ShipType", b =>
                {
                    b.Navigation("Ships");
                });

            modelBuilder.Entity("WaterProj.Models.Stop", b =>
                {
                    b.Navigation("RouteStops");
                });

            modelBuilder.Entity("WaterProj.Models.Transporter", b =>
                {
                    b.Navigation("Routes");

                    b.Navigation("Ships");
                });

            modelBuilder.Entity("WaterProj.Models.Сonvenience", b =>
                {
                    b.Navigation("ShipСonveniences");
                });
#pragma warning restore 612, 618
        }
    }
}
